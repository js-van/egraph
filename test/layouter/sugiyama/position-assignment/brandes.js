/* eslint-env mocha */
const assert = require('power-assert')
const Graph = require('../../../../graph')
const markConflicts = require('../../../../layouter/sugiyama/position-assignment/brandes/mark-conflicts')
const verticalAlignment = require('../../../../layouter/sugiyama/position-assignment/brandes/vertical-alignment')
const horizontalCompaction = require('../../../../layouter/sugiyama/position-assignment/brandes/horizontal-compaction')
const Brandes = require('../../../../layouter/sugiyama/position-assignment/brandes')

describe('markConflicts(g, layers)', () => {
  it('set flags to edges which has type 1 or 2 conflict', () => {
    const [a1, a2] = [0, 1]
    const [b1, b2, b3, b4, b5, b6, b7, b8] = [2, 3, 4, 5, 6, 7, 8, 9]
    const [c1, c2, c3, c4, c5, c6] = [10, 11, 12, 13, 14, 15]
    const [d1, d2, d3, d4, d5, d6, d7] = [16, 17, 18, 19, 20, 21, 22, 23]
    const [e1, e2, e3] = [24, 25, 26]
    const graph = new Graph()
      .addVertex(a1, {width: 10, layer: 0, order: 0})
      .addVertex(a2, {width: 10, layer: 0, order: 1})
      .addVertex(b1, {width: 10, layer: 1, order: 0})
      .addVertex(b2, {width: 10, layer: 1, order: 1})
      .addVertex(b3, {width: 10, layer: 1, order: 2, dummy: true})
      .addVertex(b4, {width: 10, layer: 1, order: 3})
      .addVertex(b5, {width: 10, layer: 1, order: 4, dummy: true})
      .addVertex(b6, {width: 10, layer: 1, order: 5, dummy: true})
      .addVertex(b7, {width: 10, layer: 1, order: 6})
      .addVertex(b8, {width: 10, layer: 1, order: 7})
      .addVertex(c1, {width: 10, layer: 2, order: 0})
      .addVertex(c2, {width: 10, layer: 2, order: 1})
      .addVertex(c3, {width: 10, layer: 2, order: 2, dummy: true})
      .addVertex(c4, {width: 10, layer: 2, order: 3, dummy: true})
      .addVertex(c5, {width: 10, layer: 2, order: 4, dummy: true})
      .addVertex(c6, {width: 10, layer: 2, order: 5})
      .addVertex(d1, {width: 10, layer: 3, order: 0})
      .addVertex(d2, {width: 10, layer: 3, order: 1})
      .addVertex(d3, {width: 10, layer: 3, order: 2, dummy: true})
      .addVertex(d4, {width: 10, layer: 3, order: 3, dummy: true})
      .addVertex(d5, {width: 10, layer: 3, order: 4, dummy: true})
      .addVertex(d6, {width: 10, layer: 3, order: 5})
      .addVertex(d7, {width: 10, layer: 3, order: 6, dummy: true})
      .addVertex(e1, {width: 10, layer: 4, order: 0})
      .addVertex(e2, {width: 10, layer: 4, order: 1})
      .addVertex(e3, {width: 10, layer: 4, order: 2})
      .addEdge(a1, b1)
      .addEdge(a1, b6)
      .addEdge(a1, b8)
      .addEdge(a2, b3)
      .addEdge(a2, b5)
      .addEdge(b2, c2)
      .addEdge(b3, c2)
      .addEdge(b4, c2)
      .addEdge(b5, c3)
      .addEdge(b6, c4)
      .addEdge(b7, c2, {type1Conflict: true})
      .addEdge(b7, c6)
      .addEdge(b8, c2, {type1Conflict: true})
      .addEdge(b8, c5)
      .addEdge(c1, d1)
      .addEdge(c1, d2)
      .addEdge(c1, d6, {type1Conflict: true})
      .addEdge(c3, d4)
      .addEdge(c4, d5)
      .addEdge(c5, d6)
      .addEdge(c6, d3, {type1Conflict: true})
      .addEdge(c6, d7)
      .addEdge(d1, e1)
      .addEdge(d1, e2)
      .addEdge(d2, e2)
      .addEdge(d3, e1)
      .addEdge(d4, e3)
      .addEdge(d5, e3)
      .addEdge(d6, e3)
      .addEdge(d7, e3)
    const layers = [
      [a1, a2],
      [b1, b2, b3, b4, b5, b6, b7, b8],
      [c1, c2, c3, c4, c5, c6],
      [d1, d2, d3, d4, d5, d6, d7],
      [e1, e2, e3]
    ]
    markConflicts(graph, layers)
    for (const [u, v] of graph.edges()) {
      if ((u === b7 && v === c2) || (u === b8 && v === c2) || (u === c1 && v === d6) || (u === c6 && v === d3)) {
        assert(graph.edge(u, v).type1Conflict)
      } else {
        assert.equal(graph.edge(u, v).type1Conflict, undefined)
      }
    }
  })
})

describe('verticalAlignment(g, layers, {rtol: false, btot: false})', () => {
  it('set root and align for all vertices', () => {
    const [a1, a2] = [0, 1]
    const [b1, b2, b3, b4, b5, b6, b7, b8] = [2, 3, 4, 5, 6, 7, 8, 9]
    const [c1, c2, c3, c4, c5, c6] = [10, 11, 12, 13, 14, 15]
    const [d1, d2, d3, d4, d5, d6, d7] = [16, 17, 18, 19, 20, 21, 22, 23]
    const [e1, e2, e3] = [24, 25, 26]
    const graph = new Graph()
      .addVertex(a1, {width: 10, layer: 0, order: 0})
      .addVertex(a2, {width: 10, layer: 0, order: 1})
      .addVertex(b1, {width: 10, layer: 1, order: 0})
      .addVertex(b2, {width: 10, layer: 1, order: 1})
      .addVertex(b3, {width: 10, layer: 1, order: 2, dummy: true})
      .addVertex(b4, {width: 10, layer: 1, order: 3})
      .addVertex(b5, {width: 10, layer: 1, order: 4, dummy: true})
      .addVertex(b6, {width: 10, layer: 1, order: 5, dummy: true})
      .addVertex(b7, {width: 10, layer: 1, order: 6})
      .addVertex(b8, {width: 10, layer: 1, order: 7})
      .addVertex(c1, {width: 10, layer: 2, order: 0})
      .addVertex(c2, {width: 10, layer: 2, order: 1})
      .addVertex(c3, {width: 10, layer: 2, order: 2, dummy: true})
      .addVertex(c4, {width: 10, layer: 2, order: 3, dummy: true})
      .addVertex(c5, {width: 10, layer: 2, order: 4, dummy: true})
      .addVertex(c6, {width: 10, layer: 2, order: 5})
      .addVertex(d1, {width: 10, layer: 3, order: 0})
      .addVertex(d2, {width: 10, layer: 3, order: 1})
      .addVertex(d3, {width: 10, layer: 3, order: 2, dummy: true})
      .addVertex(d4, {width: 10, layer: 3, order: 3, dummy: true})
      .addVertex(d5, {width: 10, layer: 3, order: 4, dummy: true})
      .addVertex(d6, {width: 10, layer: 3, order: 5})
      .addVertex(d7, {width: 10, layer: 3, order: 6, dummy: true})
      .addVertex(e1, {width: 10, layer: 4, order: 0})
      .addVertex(e2, {width: 10, layer: 4, order: 1})
      .addVertex(e3, {width: 10, layer: 4, order: 2})
      .addEdge(a1, b1)
      .addEdge(a1, b6)
      .addEdge(a1, b8)
      .addEdge(a2, b3)
      .addEdge(a2, b5)
      .addEdge(b2, c2)
      .addEdge(b3, c2)
      .addEdge(b4, c2)
      .addEdge(b5, c3)
      .addEdge(b6, c4)
      .addEdge(b7, c2, {type1Conflict: true})
      .addEdge(b7, c6)
      .addEdge(b8, c2, {type1Conflict: true})
      .addEdge(b8, c5)
      .addEdge(c1, d1)
      .addEdge(c1, d2)
      .addEdge(c1, d6, {type1Conflict: true})
      .addEdge(c3, d4)
      .addEdge(c4, d5)
      .addEdge(c5, d6)
      .addEdge(c6, d3, {type1Conflict: true})
      .addEdge(c6, d7)
      .addEdge(d1, e1)
      .addEdge(d1, e2)
      .addEdge(d2, e2)
      .addEdge(d3, e1)
      .addEdge(d4, e3)
      .addEdge(d5, e3)
      .addEdge(d6, e3)
      .addEdge(d7, e3)
    const layers = [
      [a1, a2],
      [b1, b2, b3, b4, b5, b6, b7, b8],
      [c1, c2, c3, c4, c5, c6],
      [d1, d2, d3, d4, d5, d6, d7],
      [e1, e2, e3]
    ]
    verticalAlignment(graph, layers, {rtol: false, btot: false})
    assert.equal(graph.vertex(a1).root, a1)
    assert.equal(graph.vertex(a1).align, b1)
    assert.equal(graph.vertex(a2).root, a2)
    assert.equal(graph.vertex(a2).align, b3)
    assert.equal(graph.vertex(b1).root, a1)
    assert.equal(graph.vertex(b1).align, a1)
    assert.equal(graph.vertex(b2).root, b2)
    assert.equal(graph.vertex(b2).align, b2)
    assert.equal(graph.vertex(b3).root, a2)
    assert.equal(graph.vertex(b3).align, a2)
    assert.equal(graph.vertex(b4).root, b4)
    assert.equal(graph.vertex(b4).align, c2)
    assert.equal(graph.vertex(b5).root, b5)
    assert.equal(graph.vertex(b5).align, c3)
    assert.equal(graph.vertex(b6).root, b6)
    assert.equal(graph.vertex(b6).align, c4)
    assert.equal(graph.vertex(b7).root, b7)
    assert.equal(graph.vertex(b7).align, b7)
    assert.equal(graph.vertex(b8).root, b8)
    assert.equal(graph.vertex(b8).align, c5)
    assert.equal(graph.vertex(c1).root, c1)
    assert.equal(graph.vertex(c1).align, d1)
    assert.equal(graph.vertex(c2).root, b4)
    assert.equal(graph.vertex(c2).align, b4)
    assert.equal(graph.vertex(c3).root, b5)
    assert.equal(graph.vertex(c3).align, d4)
    assert.equal(graph.vertex(c4).root, b6)
    assert.equal(graph.vertex(c4).align, d5)
    assert.equal(graph.vertex(c5).root, b8)
    assert.equal(graph.vertex(c5).align, d6)
    assert.equal(graph.vertex(c6).root, c6)
    assert.equal(graph.vertex(c6).align, d7)
    assert.equal(graph.vertex(d1).root, c1)
    assert.equal(graph.vertex(d1).align, e1)
    assert.equal(graph.vertex(d2).root, d2)
    assert.equal(graph.vertex(d2).align, e2)
    assert.equal(graph.vertex(d3).root, d3)
    assert.equal(graph.vertex(d3).align, d3)
    assert.equal(graph.vertex(d4).root, b5)
    assert.equal(graph.vertex(d4).align, b5)
    assert.equal(graph.vertex(d5).root, b6)
    assert.equal(graph.vertex(d5).align, e3)
    assert.equal(graph.vertex(d6).root, b8)
    assert.equal(graph.vertex(d6).align, b8)
    assert.equal(graph.vertex(d7).root, c6)
    assert.equal(graph.vertex(d7).align, c6)
    assert.equal(graph.vertex(e1).root, c1)
    assert.equal(graph.vertex(e1).align, c1)
    assert.equal(graph.vertex(e2).root, d2)
    assert.equal(graph.vertex(e2).align, d2)
    assert.equal(graph.vertex(e3).root, b6)
    assert.equal(graph.vertex(e3).align, b6)
  })
})

describe('horizontalCompaction(g, layers)', () => {
  it('set x for all vertices', () => {
    const [a1, a2] = [0, 1]
    const [b1, b2, b3, b4, b5, b6, b7, b8] = [2, 3, 4, 5, 6, 7, 8, 9]
    const [c1, c2, c3, c4, c5, c6] = [10, 11, 12, 13, 14, 15]
    const [d1, d2, d3, d4, d5, d6, d7] = [16, 17, 18, 19, 20, 21, 22, 23]
    const [e1, e2, e3] = [24, 25, 26]
    const graph = new Graph()
      .addVertex(a1, {width: 10, layer: 0, order: 0})
      .addVertex(a2, {width: 10, layer: 0, order: 1})
      .addVertex(b1, {width: 10, layer: 1, order: 0})
      .addVertex(b2, {width: 10, layer: 1, order: 1})
      .addVertex(b3, {width: 10, layer: 1, order: 2, dummy: true})
      .addVertex(b4, {width: 10, layer: 1, order: 3})
      .addVertex(b5, {width: 10, layer: 1, order: 4, dummy: true})
      .addVertex(b6, {width: 10, layer: 1, order: 5, dummy: true})
      .addVertex(b7, {width: 10, layer: 1, order: 6})
      .addVertex(b8, {width: 10, layer: 1, order: 7})
      .addVertex(c1, {width: 10, layer: 2, order: 0})
      .addVertex(c2, {width: 10, layer: 2, order: 1})
      .addVertex(c3, {width: 10, layer: 2, order: 2, dummy: true})
      .addVertex(c4, {width: 10, layer: 2, order: 3, dummy: true})
      .addVertex(c5, {width: 10, layer: 2, order: 4, dummy: true})
      .addVertex(c6, {width: 10, layer: 2, order: 5})
      .addVertex(d1, {width: 10, layer: 3, order: 0})
      .addVertex(d2, {width: 10, layer: 3, order: 1})
      .addVertex(d3, {width: 10, layer: 3, order: 2, dummy: true})
      .addVertex(d4, {width: 10, layer: 3, order: 3, dummy: true})
      .addVertex(d5, {width: 10, layer: 3, order: 4, dummy: true})
      .addVertex(d6, {width: 10, layer: 3, order: 5})
      .addVertex(d7, {width: 10, layer: 3, order: 6, dummy: true})
      .addVertex(e1, {width: 10, layer: 4, order: 0})
      .addVertex(e2, {width: 10, layer: 4, order: 1})
      .addVertex(e3, {width: 10, layer: 4, order: 2})
      .addEdge(a1, b1)
      .addEdge(a1, b6)
      .addEdge(a1, b8)
      .addEdge(a2, b3)
      .addEdge(a2, b5)
      .addEdge(b2, c2)
      .addEdge(b3, c2)
      .addEdge(b4, c2)
      .addEdge(b5, c3)
      .addEdge(b6, c4)
      .addEdge(b7, c2, {type1Conflict: true})
      .addEdge(b7, c6)
      .addEdge(b8, c2, {type1Conflict: true})
      .addEdge(b8, c5)
      .addEdge(c1, d1)
      .addEdge(c1, d2)
      .addEdge(c1, d6, {type1Conflict: true})
      .addEdge(c3, d4)
      .addEdge(c4, d5)
      .addEdge(c5, d6)
      .addEdge(c6, d3, {type1Conflict: true})
      .addEdge(c6, d7)
      .addEdge(d1, e1)
      .addEdge(d1, e2)
      .addEdge(d2, e2)
      .addEdge(d3, e1)
      .addEdge(d4, e3)
      .addEdge(d5, e3)
      .addEdge(d6, e3)
      .addEdge(d7, e3)
    const layers = [
      [a1, a2],
      [b1, b2, b3, b4, b5, b6, b7, b8],
      [c1, c2, c3, c4, c5, c6],
      [d1, d2, d3, d4, d5, d6, d7],
      [e1, e2, e3]
    ]
    verticalAlignment(graph, layers, {rtol: false, btot: false})
    horizontalCompaction(graph, layers, {rtol: false, btot: false})
    assert.equal(graph.vertex(a1).x, 0)
    assert.equal(graph.vertex(a2).x, 20)
    assert.equal(graph.vertex(b1).x, 0)
    assert.equal(graph.vertex(b2).x, 10)
    assert.equal(graph.vertex(b3).x, 20)
    assert.equal(graph.vertex(b4).x, 30)
    assert.equal(graph.vertex(b5).x, 40)
    assert.equal(graph.vertex(b6).x, 50)
    assert.equal(graph.vertex(b7).x, 60)
    assert.equal(graph.vertex(b8).x, 70)
    assert.equal(graph.vertex(c1).x, 10)
    assert.equal(graph.vertex(c2).x, 30)
    assert.equal(graph.vertex(c3).x, 40)
    assert.equal(graph.vertex(c4).x, 50)
    assert.equal(graph.vertex(c5).x, 70)
    assert.equal(graph.vertex(c6).x, 80)
    assert.equal(graph.vertex(d1).x, 10)
    assert.equal(graph.vertex(d2).x, 20)
    assert.equal(graph.vertex(d3).x, 30)
    assert.equal(graph.vertex(d4).x, 40)
    assert.equal(graph.vertex(d5).x, 50)
    assert.equal(graph.vertex(d6).x, 70)
    assert.equal(graph.vertex(d7).x, 80)
    assert.equal(graph.vertex(e1).x, 10)
    assert.equal(graph.vertex(e2).x, 20)
    assert.equal(graph.vertex(e3).x, 50)
  })
})

describe('Brandes.call(graph, layers)', () => {
  it('returns vertex coordinates', () => {
    const [a1, a2] = [0, 1]
    const [b1, b2, b3, b4, b5, b6, b7, b8] = [2, 3, 4, 5, 6, 7, 8, 9]
    const [c1, c2, c3, c4, c5, c6] = [10, 11, 12, 13, 14, 15]
    const [d1, d2, d3, d4, d5, d6, d7] = [16, 17, 18, 19, 20, 21, 22, 23]
    const [e1, e2, e3] = [24, 25, 26]
    const graph = new Graph()
      .addVertex(a1, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 0, order: 0})
      .addVertex(a2, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 0, order: 1})
      .addVertex(b1, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 0})
      .addVertex(b2, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 1})
      .addVertex(b3, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 2, dummy: true})
      .addVertex(b4, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 3})
      .addVertex(b5, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 4, dummy: true})
      .addVertex(b6, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 5, dummy: true})
      .addVertex(b7, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 6})
      .addVertex(b8, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 1, order: 7})
      .addVertex(c1, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 0})
      .addVertex(c2, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 1})
      .addVertex(c3, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 2, dummy: true})
      .addVertex(c4, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 3, dummy: true})
      .addVertex(c5, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 4, dummy: true})
      .addVertex(c6, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 2, order: 5})
      .addVertex(d1, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 0})
      .addVertex(d2, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 1})
      .addVertex(d3, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 2, dummy: true})
      .addVertex(d4, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 3, dummy: true})
      .addVertex(d5, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 4, dummy: true})
      .addVertex(d6, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 5})
      .addVertex(d7, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 3, order: 6, dummy: true})
      .addVertex(e1, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 4, order: 0})
      .addVertex(e2, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 4, order: 1})
      .addVertex(e3, {width: 10, height: 10, origWidth: 10, origHeight: 10, layer: 4, order: 2})
      .addEdge(a1, b1)
      .addEdge(a1, b6)
      .addEdge(a1, b8)
      .addEdge(a2, b3)
      .addEdge(a2, b5)
      .addEdge(b2, c2)
      .addEdge(b3, c2)
      .addEdge(b4, c2)
      .addEdge(b5, c3)
      .addEdge(b6, c4)
      .addEdge(b7, c2)
      .addEdge(b7, c6)
      .addEdge(b8, c2)
      .addEdge(b8, c5)
      .addEdge(c1, d1)
      .addEdge(c1, d2)
      .addEdge(c1, d6)
      .addEdge(c3, d4)
      .addEdge(c4, d5)
      .addEdge(c5, d6)
      .addEdge(c6, d3)
      .addEdge(c6, d7)
      .addEdge(d1, e1)
      .addEdge(d1, e2)
      .addEdge(d2, e2)
      .addEdge(d3, e1)
      .addEdge(d4, e3)
      .addEdge(d5, e3)
      .addEdge(d6, e3)
      .addEdge(d7, e3)
    const layers = [
      [a1, a2],
      [b1, b2, b3, b4, b5, b6, b7, b8],
      [c1, c2, c3, c4, c5, c6],
      [d1, d2, d3, d4, d5, d6, d7],
      [e1, e2, e3]
    ]
    const brandes = new Brandes()
    brandes.call(graph, layers)
    assert.equal(graph.vertex(a1).x, 50)
    assert.equal(graph.vertex(a2).x, 60)
    assert.equal(graph.vertex(b1).x, 5)
    assert.equal(graph.vertex(b2).x, 15)
    assert.equal(graph.vertex(b3).x, 25)
    assert.equal(graph.vertex(b4).x, 35)
    assert.equal(graph.vertex(b5).x, 45)
    assert.equal(graph.vertex(b6).x, 55)
    assert.equal(graph.vertex(b7).x, 65)
    assert.equal(graph.vertex(b8).x, 75)
    assert.equal(graph.vertex(c1).x, 15)
    assert.equal(graph.vertex(c2).x, 30)
    assert.equal(graph.vertex(c3).x, 45)
    assert.equal(graph.vertex(c4).x, 55)
    assert.equal(graph.vertex(c5).x, 75)
    assert.equal(graph.vertex(c6).x, 85)
    assert.equal(graph.vertex(d1).x, 10)
    assert.equal(graph.vertex(d2).x, 20)
    assert.equal(graph.vertex(d3).x, 30)
    assert.equal(graph.vertex(d4).x, 45)
    assert.equal(graph.vertex(d5).x, 55)
    assert.equal(graph.vertex(d6).x, 75)
    assert.equal(graph.vertex(d7).x, 85)
    assert.equal(graph.vertex(e1).x, 10)
    assert.equal(graph.vertex(e2).x, 20)
    assert.equal(graph.vertex(e3).x, 55)
  })
})
