/* eslint-env mocha */

const assert = require('power-assert')
const Graph = require('../../../graph')
const layout = require('../../../layouter/sugiyama-compound/position-assignment')

describe('layout', () => {
  it('', () => {
    const [a, b, c, g, h, i, j, k, v] = 'abcghijkv'
    const graph = new Graph()
      .addVertex(a, {layer: [0, 0], order: 0, width: 10, height: 10})
      .addVertex(b, {layer: [0, 0], order: 2, width: 10, height: 10})
      .addVertex(c, {layer: [0, 0], order: 1, width: 10, height: 10})
      .addVertex(g, {layer: [0, 1], order: 3, width: 10, height: 10})
      .addVertex(h, {layer: [0, 1], order: 1, width: 10, height: 10})
      .addVertex(i, {layer: [0, 1], order: 0, width: 10, height: 10})
      .addVertex(j, {layer: [0, 1], order: 4, width: 10, height: 10})
      .addVertex(k, {layer: [0, 1], order: 3, width: 10, height: 10})
      .addVertex(v, {layer: [0], order: 0})
      .addEdge(a, c)
      .addEdge(a, i)
      .addEdge(b, c)
      .addEdge(b, j)
      .addEdge(b, k)
      .addEdge(c, g)
      .addEdge(g, i)
      .addEdge(g, j)
      .addEdge(g, k)
      .addEdge(h, k)
      .setChild(v, a)
      .setChild(v, b)
      .setChild(v, c)
      .setChild(v, g)
      .setChild(v, h)
      .setChild(v, i)
      .setChild(v, j)
      .setChild(v, k)
    layout(graph)
  })

  it('works', () => {
    const [f, k, l] = 'fkl'
    const graph = new Graph()
      .addVertex(f, {layer: [0], order: 0})
      .addVertex(k, {layer: [0, 0], order: 0, width: 10, height: 10})
      .addVertex(l, {layer: [0, 1], order: 0, width: 10, height: 10})
      .addEdge(k, l)
      .setChild(f, k)
      .setChild(f, l)
    layout(graph)
    assert.equal(graph.vertex(f).x, 15)
    assert.equal(graph.vertex(f).y, 20)
    assert.equal(graph.vertex(f).width, 30)
    assert.equal(graph.vertex(f).height, 40)
    assert.equal(graph.vertex(k).x, 15)
    assert.equal(graph.vertex(k).y, 15)
    assert.equal(graph.vertex(k).width, 10)
    assert.equal(graph.vertex(k).height, 10)
    assert.equal(graph.vertex(l).x, 15)
    assert.equal(graph.vertex(l).y, 25)
    assert.equal(graph.vertex(l).width, 10)
    assert.equal(graph.vertex(l).height, 10)
  })

  it('works', () => {
    const [b, d, e, f, j, k, l] = 'bdefjkl'
    const graph = new Graph()
      .addVertex(b, {layer: [0], order: 0})
      .addVertex(d, {layer: [0, 0], order: 0, width: 10, height: 10})
      .addVertex(e, {layer: [0, 1], order: 0})
      .addVertex(f, {layer: [0, 1], order: 1})
      .addVertex(j, {layer: [0, 1, 0], order: 0, width: 10, height: 10})
      .addVertex(k, {layer: [0, 1, 0], order: 0, width: 10, height: 10})
      .addVertex(l, {layer: [0, 1, 1], order: 0, width: 10, height: 10})
      .addEdge(d, e)
      .addEdge(j, l)
      .addEdge(k, l)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
    layout(graph)
  })

  it('works', () => {
    const [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v] = 'abcdefghijklmnopqrstuv'
    const graph = new Graph()
      .addVertex(a, {layer: [0], order: 0})
      .addVertex(b, {layer: [0, 0], order: 0})
      .addVertex(c, {layer: [0, 1], order: 0})
      .addVertex(d, {width: 10, height: 10, layer: [0, 0, 0], order: 0})
      .addVertex(e, {layer: [0, 0, 1], order: 0})
      .addVertex(f, {layer: [0, 0, 1], order: 1})
      .addVertex(g, {layer: [0, 1, 1], order: 0})
      .addVertex(h, {width: 10, height: 10, layer: [0, 1, 0], order: 0})
      .addVertex(i, {width: 10, height: 10, layer: [0, 1, 2], order: 0})
      .addVertex(j, {width: 10, height: 10, layer: [0, 0, 1, 0], order: 0})
      .addVertex(k, {width: 10, height: 10, layer: [0, 0, 1, 0], order: 0})
      .addVertex(l, {width: 10, height: 10, layer: [0, 0, 1, 1], order: 0})
      .addVertex(m, {width: 10, height: 10, layer: [0, 1, 1, 1], order: 0})
      .addVertex(n, {width: 10, height: 10, layer: [0, 1, 1, 2], order: 0})
      .addVertex(o, {layer: [0, 1], order: 1})
      .addVertex(p, {width: 10, height: 10, layer: [0, 1, 0], order: 0})
      .addVertex(q, {layer: [0, 1, 1], order: 3})
      .addVertex(r, {width: 10, height: 10, layer: [0, 1, 1, 0], order: 0})
      .addVertex(s, {width: 10, height: 10, layer: [0, 1, 1, 3], order: 0})
      .addVertex(t, {layer: [0, 1, 1], order: 1})
      .addVertex(u, {width: 10, height: 10, layer: [0, 1, 1, 2], order: 0})
      .addVertex(v, {layer: [0, 1, 1], order: 2})
      .addEdge(b, c)
      .addEdge(b, o)
      .addEdge(d, e)
      .addEdge(h, q)
      .addEdge(j, l)
      .addEdge(k, l)
      .addEdge(m, n)
      .addEdge(m, u)
      .addEdge(n, s)
      .addEdge(p, g)
      .addEdge(r, m)
      .addEdge(t, i)
      .addEdge(v, i)
      .setChild(a, b)
      .setChild(a, c)
      .setChild(a, o)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(c, g)
      .setChild(c, h)
      .setChild(c, i)
      .setChild(c, q)
      .setChild(c, t)
      .setChild(c, v)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
      .setChild(g, m)
      .setChild(g, n)
      .setChild(o, p)
      .setChild(q, r)
      .setChild(t, s)
      .setChild(v, u)
    layout(graph)
  })
})
