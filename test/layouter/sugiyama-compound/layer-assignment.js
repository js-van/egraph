/* eslint-env mocha */
const assert = require('power-assert')
const Graph = require('../../../graph')
const derivedGraph = require('../../../layouter/sugiyama-compound/derived-graph')
const acyclicDerivedGraph = require('../../../layouter/sugiyama-compound/acyclic-derived-graph')
const layerAssignment = require('../../../layouter/sugiyama-compound/layer-assignment')
const normalize = require('../../../layouter/sugiyama-compound/normalize')

describe('derivedGraph(graph)', () => {
  it('', () => {
    const [a, b, c, d, e, f, g, h, i, j, k, l, m, n] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    const graph = new Graph()
      .addVertex(a)
      .addVertex(b)
      .addVertex(c)
      .addVertex(d)
      .addVertex(e)
      .addVertex(f)
      .addVertex(g)
      .addVertex(h)
      .addVertex(i)
      .addVertex(j)
      .addVertex(k)
      .addVertex(l)
      .addVertex(m)
      .addVertex(n)
      .addEdge(b, c)
      .addEdge(d, e)
      .addEdge(g, b)
      .addEdge(h, m)
      .addEdge(i, n)
      .addEdge(j, l)
      .addEdge(k, l)
      .addEdge(m, i)
      .addEdge(m, n)
      .setChild(a, b)
      .setChild(a, c)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
      .setChild(c, g)
      .setChild(c, h)
      .setChild(c, i)
      .setChild(g, m)
      .setChild(g, n)
    const derived = derivedGraph(graph)
    assert.equal(derived.edge(c, b).priority, -1)
    assert.equal(derived.edge(e, f).priority, -2)
    assert.equal(derived.edge(g, i).priority, -1)
    assert.equal(derived.edge(h, g).priority, -1)
    assert.equal(derived.edge(i, g).priority, -1)
  })
})

describe('acyclicDerivedGraph(graph)', () => {
  it('', () => {
    const [a, b, c, d, e, f, g, h, i, j, k, l, m, n] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    const graph = new Graph()
      .addVertex(a)
      .addVertex(b)
      .addVertex(c)
      .addVertex(d)
      .addVertex(e)
      .addVertex(f)
      .addVertex(g)
      .addVertex(h)
      .addVertex(i)
      .addVertex(j)
      .addVertex(k)
      .addVertex(l)
      .addVertex(m)
      .addVertex(n)
      .addEdge(b, c)
      .addEdge(c, b, {priority: -1})
      .addEdge(d, e)
      .addEdge(e, f, {priority: -2})
      .addEdge(g, b)
      .addEdge(g, i, {priority: -1})
      .addEdge(h, g, {priority: -1})
      .addEdge(h, m)
      .addEdge(i, g, {priority: -1})
      .addEdge(i, n)
      .addEdge(j, l)
      .addEdge(k, l)
      .addEdge(m, i)
      .addEdge(m, n)
      .setChild(a, b)
      .setChild(a, c)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
      .setChild(c, g)
      .setChild(c, h)
      .setChild(c, i)
      .setChild(g, m)
      .setChild(g, n)
    acyclicDerivedGraph(graph)
    assert(!graph.edge(c, b))
    assert(!graph.edge(g, i))
    assert(graph.edge(b, c))
    assert(graph.edge(i, g))
  })
})

describe('layerAssignment(graph)', () => {
  it('', () => {
    const [a, b, c, d, e, f, g, h, i, j, k, l, m, n] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    const graph = new Graph()
      .addVertex(a)
      .addVertex(b)
      .addVertex(c)
      .addVertex(d)
      .addVertex(e)
      .addVertex(f)
      .addVertex(g)
      .addVertex(h)
      .addVertex(i)
      .addVertex(j)
      .addVertex(k)
      .addVertex(l)
      .addVertex(m)
      .addVertex(n)
      .addEdge(b, c)
      .addEdge(d, e)
      .addEdge(e, f)
      .addEdge(g, b)
      .addEdge(g, i)
      .addEdge(h, g)
      .addEdge(h, m)
      .addEdge(i, n)
      .addEdge(j, l)
      .addEdge(k, l)
      .addEdge(m, i)
      .addEdge(m, n)
      .setChild(a, b)
      .setChild(a, c)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
      .setChild(c, g)
      .setChild(c, h)
      .setChild(c, i)
      .setChild(g, m)
      .setChild(g, n)
    const result = layerAssignment(graph)
    assert.deepEqual(result.get(a), [0])
    assert.deepEqual(result.get(b), [0, 0])
    assert.deepEqual(result.get(c), [0, 1])
    assert.deepEqual(result.get(d), [0, 0, 0])
    assert.deepEqual(result.get(e), [0, 0, 1])
    assert.deepEqual(result.get(f), [0, 0, 2])
    assert.deepEqual(result.get(g), [0, 1, 1])
    assert.deepEqual(result.get(h), [0, 1, 0])
    assert.deepEqual(result.get(i), [0, 1, 2])
    assert.deepEqual(result.get(j), [0, 0, 1, 0])
    assert.deepEqual(result.get(k), [0, 0, 2, 0])
    assert.deepEqual(result.get(l), [0, 0, 2, 1])
    assert.deepEqual(result.get(m), [0, 1, 1, 0])
    assert.deepEqual(result.get(n), [0, 1, 1, 1])
  })
})

describe('normalize(graph, layers)', () => {
  it('', () => {
    const [a, b, c, d, e, f, g, h, i, j, k, l, m, n] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    const graph = new Graph()
      .addVertex(a)
      .addVertex(b)
      .addVertex(c)
      .addVertex(d)
      .addVertex(e)
      .addVertex(f)
      .addVertex(g)
      .addVertex(h)
      .addVertex(i)
      .addVertex(j)
      .addVertex(k)
      .addVertex(l)
      .addVertex(m)
      .addVertex(n)
      .addEdge(b, c)
      .addEdge(d, e)
      .addEdge(e, f)
      .addEdge(g, b)
      .addEdge(g, i)
      .addEdge(h, g)
      .addEdge(h, m)
      .addEdge(i, n)
      .addEdge(j, l)
      .addEdge(k, l)
      .addEdge(m, i)
      .addEdge(m, n)
      .setChild(a, b)
      .setChild(a, c)
      .setChild(b, d)
      .setChild(b, e)
      .setChild(b, f)
      .setChild(e, j)
      .setChild(f, k)
      .setChild(f, l)
      .setChild(c, g)
      .setChild(c, h)
      .setChild(c, i)
      .setChild(g, m)
      .setChild(g, n)
    const layers = layerAssignment(graph)
    normalize(graph, layers)
    assert.equal(graph.numVertices(), 22)
    assert.equal(graph.numEdges(), 16)
  })
})
